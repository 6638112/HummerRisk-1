<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummerrisk.base.mapper.ext.ExtCloudNativeSourceMapper">

    <resultMap id="BaseResultMap" type="com.hummerrisk.dto.CloudNativeSourceDTO"
               extends="com.hummerrisk.base.mapper.CloudNativeSourceMapper.BaseResultMap">
        <result column="userName" property="userName"/>
        <result column="cloudNativeName" jdbcType="VARCHAR" property="cloudNativeName" />
        <result column="pluginIcon" jdbcType="VARCHAR" property="pluginIcon" />
    </resultMap>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.sourceName != null and (${name} == null or ${name} == "")'>
            and t.source_name
            <include refid="condition">
                <property name="object" value="${condition}.sourceName"/>
            </include>
        </if>
        <if test="${condition}.updateTime != null">
            and t.update_time
            <include refid="condition">
                <property name="object" value="${condition}.updateTime"/>
            </include>
        </if>
        <if test="${condition}.sourceNamespace != null">
            and t.source_namespace
            <include refid="condition">
                <property name="object" value="${condition}.sourceNamespace"/>
            </include>
        </if>
        <if test="${condition}.createTime != null">
            and t.create_time
            <include refid="condition">
                <property name="object" value="${condition}.createTime"/>
            </include>
        </if>
        <if test="${condition}.sourceType != null">
            and t.source_type
            <include refid="condition">
                <property name="object" value="${condition}.sourceType"/>
            </include>
        </if>
        <if test="${condition}.cloudNativeId != null">
            and t.cloud_native_id
            <include refid="condition">
                <property name="object" value="${condition}.cloudNativeId"/>
            </include>
        </if>
        <if test="${condition}.creator != null">
            and t.creator
            <include refid="condition">
                <property name="object" value="${condition}.creator"/>
            </include>
        </if>
    </sql>

    <select id="getCloudNativeSourceList" resultMap="BaseResultMap">
        select
        t.*,
        t1.plugin_icon as pluginIcon,
        t1.name as cloudNativeName,
        t2.name as userName
        FROM cloud_native_source as t
        LEFT JOIN cloud_native t1 ON t.cloud_native_id = t1.id
        LEFT JOIN user t2 ON t1.creator = t2.id
        <where>
            <if test="request.combine != null">
                <include refid="combine">
                    <property name="condition" value="request.combine"/>
                    <property name="name" value="request.name"/>
                </include>
            </if>

            <if test="request.name != null and request.name != ''">
                and t.source_name like CONCAT('%', #{request.name},'%')
            </if>

            <if test="request.cloudNativeId != null and request.cloudNativeId != ''">
                and t.cloud_native_id = #{request.cloudNativeId}
            </if>
        </where>
        order by t.update_time desc
    </select>

    <select id="situationInfo" parameterType="java.util.Map" resultType="com.hummerrisk.dto.SituationDTO">
        SELECT *
        from (
                (
                SELECT IFNULL(count(t.id), 0) as namespaces
                from cloud_native_source t
                where t.source_type = 'Namespace'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as namespaces,
                (
                SELECT IFNULL(count(t.id), 0) as pods
                from cloud_native_source t
                where t.source_type = 'Pod'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as pods,
                (
                SELECT IFNULL(count(t.id), 0) as nodes
                from cloud_native_source t
                where t.source_type = 'Node'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as nodes,
                (
                SELECT IFNULL(count(t.id), 0) as deployments
                from cloud_native_source t
                where t.source_type = 'Deployment'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as deployments,
                (
                SELECT IFNULL(count(t.id), 0) as daemonsets
                from cloud_native_source t
                where t.source_type = 'Daemonset'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as daemonsets,
                (
                SELECT IFNULL(count(t.id), 0) as services
                from cloud_native_source t
                where t.source_type = 'Service'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as services,
                (
                SELECT IFNULL(count(t.id), 0) as ingress
                from cloud_native_source t
                where t.source_type = 'Ingress'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as ingress,
                (
                SELECT IFNULL(count(t.id), 0) as roles
                from cloud_native_source t
                where t.source_type = 'Role'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as roles,
                (
                SELECT IFNULL(count(t.id), 0) as secrets
                from cloud_native_source t
                where t.source_type = 'Secret'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as secrets,
                (
                SELECT IFNULL(count(t.id), 0) as configmaps
                from cloud_native_source t
                where t.source_type = 'Configmap'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as configmaps,
                (
                SELECT IFNULL(count(t.id), 0) as statefulSets
                from cloud_native_source t
                where t.source_type = 'StatefulSet'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as statefulSets,
                (
                SELECT IFNULL(count(t.id), 0) as cronJobs
                from cloud_native_source t
                where t.source_type = 'CronJob'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as cronJobs,
                (
                SELECT IFNULL(count(t.id), 0) as jobs
                from cloud_native_source t
                where t.source_type = 'Job'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as jobs,
                (
                SELECT IFNULL(count(t.id), 0) as pvs
                from cloud_native_source t
                where t.source_type = 'PV'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as pvs,
                (
                SELECT IFNULL(count(t.id), 0) as pvcs
                from cloud_native_source t
                where t.source_type = 'PVC'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as pvcs,
                (
                SELECT IFNULL(count(t.id), 0) as leases
                from cloud_native_source t
                where t.source_type = 'Lease'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as leases,
                (
                SELECT IFNULL(count(t.id), 0) as endpointSlices
                from cloud_native_source t
                where t.source_type = 'EndpointSlice'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as endpointSlices,
                (
                SELECT IFNULL(count(t.id), 0) as events
                from cloud_native_source t
                where t.source_type = 'Event'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as events,
                (
                SELECT IFNULL(count(t.id), 0) as networkPolicies
                from cloud_native_source t
                where t.source_type = 'NetworkPolicy'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as networkPolicies,
                (
                SELECT IFNULL(count(t.id), 0) as versions
                from cloud_native_source t
                where t.source_type = 'Version'
                <if test="cloudNativeId != null and cloudNativeId != ''">
                    and t.cloud_native_id like CONCAT('%', #{cloudNativeId},'%')
                </if>
                ) as versions
             )
    </select>

    <resultMap id="D3BaseResultMap" type="com.hummerrisk.controller.request.k8s.K8sTopology">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <collection property="children" ofType="com.hummerrisk.controller.request.k8s.K8s" javaType="list" select="selectK8s" column="name">
        </collection>
    </resultMap>

    <resultMap id="K8sBaseResultMap" type="com.hummerrisk.controller.request.k8s.K8s">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <collection property="children" ofType="com.hummerrisk.controller.request.k8s.ResourceType" javaType="list"
                    select="selectResourceType" column="k8sId">
        </collection>
    </resultMap>

    <resultMap id="ResourceTypeBaseResultMap" type="com.hummerrisk.controller.request.k8s.ResourceType">
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="k8sId" jdbcType="VARCHAR" property="k8sId" />
        <result column="resourceType" jdbcType="VARCHAR" property="resourceType" />
        <collection property="children" ofType="com.hummerrisk.controller.request.k8s.Resource" javaType="list"
                    select="selectResource" column="{k8sId=k8sId, resourceType=resourceType}">
            <result column="name" jdbcType="VARCHAR" property="name" />
            <result column="value" jdbcType="INTEGER" property="value" />
        </collection>
    </resultMap>

    <select id="k8sTopology" resultMap="D3BaseResultMap">
        select 'K8s' as name
    </select>

    <select id="selectK8s" resultMap="K8sBaseResultMap">
        select
            CONCAT('K8s账号: \r', t.name, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.id
                   ), ' 个资源)'
                ) as name,
            t.id as k8sId
        from cloud_native t
    </select>

    <select id="selectResourceType" resultMap="ResourceTypeBaseResultMap">
        select
            CONCAT('资源类型: \r', t.source_type, '\r(共 ',
                   (
                       select count(t1.id) from cloud_native_source t1
                       where t1.cloud_native_id = t.cloud_native_id and t1.source_type = t.source_type
                   ), ' 个资源)'
                ) as name,
            t.cloud_native_id as k8sId,
            t.source_type as resourceType
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId}
        group by t.source_type, t.cloud_native_id
    </select>

    <select id="selectResource" resultType="com.hummerrisk.controller.request.sync.Resource">
        select
            CASE
                WHEN t.source_namespace IS NULL
                    THEN CONCAT(t.source_name)
                ELSE CONCAT(t.source_name)
                END AS name,
            t.source_namespace as namespace,
            CASE
                WHEN t.source_namespace IS NULL
                    THEN 2
                ELSE 1
                END AS value
        from cloud_native_source t
        where t.cloud_native_id = #{k8sId} and t.source_type = #{resourceType}
    </select>

</mapper>
