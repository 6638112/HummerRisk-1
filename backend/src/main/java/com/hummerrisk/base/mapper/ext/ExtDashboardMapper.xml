<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hummerrisk.base.mapper.ext.ExtDashboardMapper">

    <select id="topInfo" parameterType="java.util.Map" resultType="com.hummerrisk.dto.TopInfoDTO">
        SELECT *
        from (
              (SELECT IFNULL(count(user.id), 0) as users from user) as users,
              (SELECT IFNULL(count(task.id), 0) as tasks from task) as tasks,
              (SELECT (SELECT IFNULL(count(t.id), 0) from cloud_account t) + (SELECT IFNULL(count(t.id), 0) from image t) + (SELECT IFNULL(count(t.id), 0) from package t) + (SELECT IFNULL(count(t.id), 0) from server t) + (SELECT IFNULL(count(t.id), 0) from code t) as accounts) as accounts,
              (SELECT IFNULL(count(t.id), 0) as cloudAccounts from cloud_account t LEFT JOIN plugin p on t.plugin_id = p.id where p.type = 'cloud') as cloudAccounts,
              (SELECT IFNULL(count(t.id), 0) as vulnAccounts from cloud_account t LEFT JOIN plugin p on t.plugin_id = p.id where p.type = 'vuln') as vulnAccounts,
              (SELECT IFNULL(count(t.id), 0) as serverAccounts from server t) as serverAccounts,
              (SELECT IFNULL(count(t.id), 0) as packageAccounts from package t) as packageAccounts,
              (SELECT IFNULL(count(t.id), 0) as imageAccounts from image t) as imageAccounts,
              (SELECT IFNULL(count(t.id), 0) as codeAccounts from code t) as codeAccounts,
              (SELECT (SELECT IFNULL(count(t.id), 0) from rule t) + (SELECT IFNULL(count(t.id), 0) from image_rule t) + (SELECT IFNULL(count(t.id), 0) from package_rule t) + (SELECT IFNULL(count(t.id), 0) from server_rule t) + (SELECT IFNULL(count(t.id), 0) from code_rule t) as rules) as rules,
              (SELECT IFNULL(count(t.id), 0) as cloudRules from rule t LEFT JOIN plugin p on t.plugin_id = p.id where p.type = 'cloud') as cloudRules,
              (SELECT IFNULL(count(t.id), 0) as vulnRules from rule t LEFT JOIN plugin p on t.plugin_id = p.id where p.type = 'vuln') as vulnRules,
              (SELECT IFNULL(count(t.id), 0) as imageRules from image_rule t) as imageRules,
              (SELECT IFNULL(count(t.id), 0) as packageRules from package_rule t) as packageRules,
              (SELECT IFNULL(count(t.id), 0) as serverRules from server_rule t) as serverRules,
              (SELECT IFNULL(count(t.id), 0) as codeRules from code_rule t) as codeRules,
              (SELECT (SELECT IFNULL(count(t.id), 0) from resource_item t) + (SELECT IFNULL(count(t.id), 0) from image_result t) + (SELECT IFNULL(count(t.id), 0) from package_result t) + (SELECT IFNULL(count(t.id), 0) from server_result t) + (SELECT IFNULL(count(t.id), 0) from code_result t) as results) as results,
              (SELECT IFNULL(count(t.id), 0) as cloudResult from resource_item t LEFT JOIN plugin p on t.plugin_id = p.id where p.type = 'cloud') as cloudResult,
              (SELECT IFNULL(count(t.id), 0) as vulnResult from resource_item t LEFT JOIN plugin p on t.plugin_id = p.id where p.type = 'vuln') as vulnResult,
              (SELECT IFNULL(count(t.id), 0) as imageResult from image_result t) as imageResult,
              (SELECT IFNULL(count(t.id), 0) as packageResult from package_result t) as packageResult,
              (SELECT IFNULL(count(t.id), 0) as codeResult from code_result t) as codeResult,
              (SELECT IFNULL(count(t.id), 0) as serverResult from server_result t) as serverResult
                 )
    </select>

    <select id="packageChartX" parameterType="java.util.Map" resultType="java.lang.String">
        select name
        from package_result
        order by update_time desc
        limit 10;
    </select>

    <select id="packageChartY" parameterType="java.util.Map" resultType="java.lang.Integer">
        select IFNULL(return_sum, 0) as returnSum
        from package_result
        order by update_time desc
        limit 10;
    </select>

    <select id="imageChartX" parameterType="java.util.Map" resultType="java.lang.String">
        select name
        from image_result
        order by update_time desc
        limit 10;
    </select>

    <select id="imageChartY" parameterType="java.util.Map" resultType="java.lang.Integer">
        select IFNULL(return_sum, 0) as returnSum
        from image_result
        order by update_time desc
        limit 10;
    </select>

    <select id="codeChartX" parameterType="java.util.Map" resultType="java.lang.String">
        select name
        from code_result
        order by update_time desc
            limit 10;
    </select>

    <select id="codeChartY" parameterType="java.util.Map" resultType="java.lang.Integer">
        select IFNULL(return_sum, 0) as returnSum
        from code_result
        order by update_time desc
            limit 10;
    </select>

    <select id="cloudNativeChartX" parameterType="java.util.Map" resultType="java.lang.String">
        select name
        from cloud_native_result
        order by update_time desc
            limit 10;
    </select>

    <select id="cloudNativeChartY" parameterType="java.util.Map" resultType="java.lang.Integer">
        select IFNULL(return_sum, 0) as returnSum
        from cloud_native_result
        order by update_time desc
            limit 10;
    </select>

    <select id="configChartX" parameterType="java.util.Map" resultType="java.lang.String">
        select name
        from cloud_native_config_result
        order by update_time desc
            limit 10;
    </select>

    <select id="configChartY" parameterType="java.util.Map" resultType="java.lang.Integer">
        select IFNULL(return_sum, 0) as returnSum
        from cloud_native_config_result
        order by update_time desc
            limit 10;
    </select>

    <select id="taskCalendar" resultType="com.hummerrisk.controller.request.dashboard.TaskCalendarVo">
        select
            'current-month' as 'type',
            true as 'isSelected',
            from_unixtime(t.last_fire_time/1000, '%Y-%m-%d') as 'day'
        from task t
        GROUP BY
            from_unixtime(t.last_fire_time/1000, '%Y-%m-%d')
        ORDER BY
            from_unixtime(t.last_fire_time/1000, '%Y-%m-%d')
    </select>

    <select id="analysisChartX" parameterType="com.hummerrisk.controller.request.dashboard.AnslysisVo" resultType="java.lang.String">
        select
        from_unixtime(t.create_time/1000, '%Y-%m-%d') as name
        from history_scan t
        left join cloud_account t1 on t.account_id = t1.id
        left join server_result t2 on t.account_id = t2.id
        left join image_result t3 on t.account_id = t3.id
        left join package_result t4 on t.account_id = t4.id
        left join code_result t5 on t.account_id = t5.id
        left join cloud_native_result t6 on t.account_id = t6.id
        left join cloud_native_config_result t7 on t.account_id = t7.id
        JOIN (
        SELECT FROM_UNIXTIME( create_time/1000, '%Y-%m-%d') as date,
        MAX( create_time ) max_time
        FROM history_scan
        GROUP BY date
        ) b ON b.max_time = t.create_time
        <where>
            <if test="cycle != null">
                AND DATE_SUB(CURDATE(), INTERVAL #{cycle} DAY) &lt;= from_unixtime(t.create_time/1000, '%Y-%m-%d')
            </if>
            <if test="types != null">
                AND t.account_type in
                <foreach collection="types" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="users != null">
                AND t.operator in
                <foreach collection="users" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            AND (t1.name is not null OR t2.server_name is not null OR t3.name is not null OR t4.name is not null OR t5.name is not null OR t6.name is not null OR t7.name is not null)
        </where>
        ORDER BY t.create_time
        limit #{cycle};
    </select>

    <select id="analysisChartY" parameterType="com.hummerrisk.controller.request.dashboard.AnslysisVo" resultType="java.lang.Integer">
        select
        IFNULL(t.scan_score, 100) as score
        from history_scan t
        left join cloud_account t1 on t.account_id = t1.id
        left join server_result t2 on t.account_id = t2.id
        left join image_result t3 on t.account_id = t3.id
        left join package_result t4 on t.account_id = t4.id
        left join code_result t5 on t.account_id = t5.id
        left join cloud_native_result t6 on t.account_id = t6.id
        left join cloud_native_config_result t7 on t.account_id = t7.id
        JOIN (
        SELECT FROM_UNIXTIME( create_time/1000, '%Y-%m-%d') as date,
            MAX( create_time ) max_time
            FROM history_scan
        GROUP BY date
        ) b ON b.max_time = t.create_time
        <where>
            <if test="cycle != null">
                AND DATE_SUB(CURDATE(), INTERVAL #{cycle} DAY) &lt;= from_unixtime(t.create_time/1000, '%Y-%m-%d')
            </if>
            <if test="types != null">
                AND t.account_type in
                <foreach collection="types" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            <if test="users != null">
                AND t.operator in
                <foreach collection="users" item="item" index="index" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
            AND (t1.name is not null OR t2.server_name is not null OR t3.name is not null OR t4.name is not null OR t5.name is not null OR t6.name is not null OR t7.name is not null)
        </where>
        ORDER BY t.create_time
        limit #{cycle};
    </select>

    <sql id="condition">
        <choose>
            <when test='${object}.operator == "like"'>
                like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "not like"'>
                not like CONCAT('%', #{${object}.value},'%')
            </when>
            <when test='${object}.operator == "in"'>
                in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "not in"'>
                not in
                <foreach collection="${object}.value" item="v" separator="," open="(" close=")">
                    #{v}
                </foreach>
            </when>
            <when test='${object}.operator == "between"'>
                between #{${object}.value[0]} and #{${object}.value[1]}
            </when>
            <when test='${object}.operator == "gt"'>
                &gt; #{${object}.value}
            </when>
            <when test='${object}.operator == "lt"'>
                &lt; #{${object}.value}
            </when>
            <when test='${object}.operator == "ge"'>
                &gt;= #{${object}.value}
            </when>
            <when test='${object}.operator == "le"'>
                &lt;= #{${object}.value}
            </when>
            <otherwise>
                = #{${object}.value}
            </otherwise>
        </choose>
    </sql>

    <sql id="combine">
        <if test='${condition}.scanType != null and (${scanType} == null or ${scanType} == "")'>
            and t.account_type
            <include refid="condition">
                <property name="object" value="${condition}.scanType"/>
            </include>
        </if>
        <if test="${condition}.status != null">
            and t.status
            <include refid="condition">
                <property name="object" value="${condition}.status"/>
            </include>
        </if>
    </sql>

    <select id="historyScanVo" parameterType="com.hummerrisk.controller.request.dashboard.HistoryScanVo" resultType="com.hummerrisk.controller.request.dashboard.HistoryScanVo">
        select
        t.*,
        IFNULL(t7.name, IFNULL(t6.name, IFNULL(t5.name, IFNULL(t4.name, IFNULL(t3.name, IFNULL(t2.server_name, t1.name)))))) as accountName,
        t8.name as userName
        from history_scan t
        left join cloud_account t1 on t.account_id = t1.id
        left join server_result t2 on t.account_id = t2.id
        left join image_result t3 on t.account_id = t3.id
        left join package_result t4 on t.account_id = t4.id
        left join code_result t5 on t.account_id = t5.id
        left join cloud_native_result t6 on t.account_id = t6.id
        left join cloud_native_config_result t7 on t.account_id = t7.id
        left join user t8 on t.operator = t8.id
        <where>
            <if test="combine != null">
                <include refid="combine">
                    <property name="condition" value="combine"/>
                </include>
            </if>
            <if test="scanType != null">
                AND t.account_type = #{scanType}
            </if>
            <if test="accountId != null">
                AND t.account_id = #{accountId}
            </if>
            <if test="users != null">
                AND t.operator = #{users}
            </if>
            <if test="startTime != null and endTime != null">
                AND t.create_time between #{startTime} and #{endTime}
            </if>
            AND (t1.name is not null OR t2.server_name is not null OR t3.name is not null OR t4.name is not null OR t5.name is not null OR t6.name is not null OR t7.name is not null)
        </where>
        order by t.create_time desc
    </select>
</mapper>
